- RubyGem is a package management system which is used for Ruby 
     sudo apt-get install ruby-full
- Gems is a library, Ruby application, include code,documentation and many other information
    gem install <name>
    gem install rails -v 7.0.0
    gem info <gem_name>
    gem update <gem_name>
    gem update --- update all gem
    gem list <gem_name> --- show version
    gem uninstall <name>
    gem uninstall rails -v 7.0.0
    gem -v 3.4.20
    gem list
- Gemfile in a project is a file which store information about the gem that the project require or depend on
- Bundler will read the file and install all the gem in the gem file
    bundle install - install all gem in gem file
    bundle update - Update all gem file to the suitable versions
    bundle cache 
    bundle config
    bundle help
    bundle add - add gem to gemfile and run bundle install
    bundle gem - create a  skeleton project to add new gem 
    remove gem in gem file ---> remove line --> run again bundle install
    bundle info
    bundle init - create gem file
    bundle open - open source code of gem
    bundle outdated - list the outdated gem in gem file
    bundle remove <gem>
    bundle show - list all gem in gem file
    bundle version
- When bundle is run, it will create a gemfile.lock to save all the version that it installed to make sure the same dependency will be used on every environment


 gem version ~> 7.1.3 means accept from 7.1.x with x >=3 so 7.2.0 is not valid
 gem version >= 7.1.3.3 means accept the newest version that >= 7.1.3.3
 group :development, :test to define the environment that gem should only be downloaded and installed,
---> gem "debug", platforms: %i[ mri windows ] should only be installed on platform mri, windows

 gem "nokogiri", require: false --- default: true -> auto require when run bundler.require

method lookup path: immediate class -> all module included in, ordered by LIFO -> superclass (method, module) -> kernel class  ->  basic object
find <namme>.ancestor
using module for namespacing: group related class under module
    buddy = Mammal::Dog.new
    kitty = Mammal::Cat.new
    buddy.speak('Arf!')           # => "Arf!"
    kitty.say_name('kitty')       # => "kitty"

super key_word --> call the method earlier in the method lookup path and invoke it
    class Animal
    attr_accessor :name

    def initialize(name)
        @name = name
    end
    end

    class GoodDog < Animal
    def initialize(color)
        super
        @color = color
    end
    end

    bruno = GoodDog.new("brown")        # => #<GoodDog:0x007fb40b1e6718 @color="brown", @name="brown">
-------> The funny here is the super automatic pass the arguments which is passed into current method to the super class
----->super() be careful when call super because it may cause error when automatic passing the argument


send method --> passing a symbol, string is name of a method to invoke
instance_of

class_instance_variable, instance_variable

include ---> using module as instance method
extend ---> using module as class method
classname::Constant

method_missing(symbol, *args) for missing function
singleton_method_added(symbol) automatic called when add a new singleton_method
singleton_method_undefined (symbol)

The === operator, also known as the case equality or triple equals operator, is used in case statements and is often defined to check membership or pattern matching. Its behavior can vary depending on the class of the object on the left-hand side.

eql? compare content. similar to "==" but more strict, equal content and type, and used for compare hash
equal? compare the object id in the memory, cannot overide

begin
ensure  wiil ensure doing the following code before raise exception
end

unless
end

begin
rescue ----> The same with try catch, alway prevent the program from crashing
ensure
end

rescue
    retry  ----> Using to jummping to the begin tag of the code
end

$! using to store last exception raised

raise ---> without arg will automatic reraise the last
retries --> keep track the number of retry

ruby acess control

private:
Note that in this case, we can not use self.human_years, because the human_years method is private. 
Remember that self.human_years is equivalent to sparky.human_years, which is not allowed for private methods. 
Therefore, we have to just use human_years. 
In summary, private methods are not accessible outside of the class definition at all, 
and are only accessible from inside the class when called without self

protected:
The main difference between them is that protected methods allow access between class instances, while private methods do not.


String: 


    String#sub: One substitution (or none); returns a new string.

    String#sub!: One substitution (or none); returns self.

    String#gsub: Zero or more substitutions; returns a new string.

    String#gsub!: Zero or more substitutions; returns self.

    string slice: positive num, negative num
    string[-2]
    string[1]
    string[start, length]
    string[range]
    string[regex, capture=0] capture is index or group symbol
    -----s[/(?<vowel>[aeiou])(?<non_vowel>[^aeiou])/, :vowel] # => "e"
    string["substring"]

    chop!: Removes trailing newline characters if found; otherwise removes the last character; returns self if any changes, nil otherwise.
    .length, Returns the count of characters (not bytes) in self:
    .empty? , Returns true if the length of self is zero, false otherwise:
    .count,  count(*selectors) → integer 
        Returns the total number of characters in self that are specified by the given selectors (see Multiple Character Selectors):
    insert,  insert(index, other_string) → self inserts the given other_string into self; returns self. If the Integer index is positive, inserts other_string at offset index, else insert index+1
    capitalize: Returns a copy of self with the first character upcased and all other characters downcased.
    downcase: Returns a copy of self with all characters downcased.
    upcase: Returns a copy of self with all characters upcased.
    swapcase: Returns a copy of self with all upcase characters downcased and all downcase characters upcased.
    .reverse,  reverse: Returns a copy of self with its characters in reverse order.
    .split, split: Returns an array of substrings determined by a given delimiter – regexp or string – or, if a block given, passes those substrings to the block.
     try_convert(object) → object, new_string, or nil
     intern → symbol , create corresponding symbol if not exist (<name>.intern)
    .chop,  chop → new_string Returns a new string copied from self, with trailing characters possibly removed. Removes "\r\n" if those are the last two characters.
    .strip, Returns a copy of self with leading and trailing(end) whitespace removed.
    .to_i, Returns the result of interpreting leading characters in self as an integer in the given base (which must be in (0, 2..36))
    .gsub, gsub: Returns a copy of self with each substring that matches a given pattern replaced with a given replacement string.
    .index.

     index(substring, offset = 0) → integer or nil
index(regexp, offset = 0) → integer or nil

Returns the integer index of the first match for the given argument, or nil if none found; the search of self is forward, and begins at position offset (in characters).

With string argument substring, returns the index of the first matching substring in self:


.length, .first, .last, .take, .pop, .shift, .push, .unshift, .delete, .delete_at, .reverse, .select, detect, .include?, .join, .each, .map, .uniq, .concat, << , &, |, +, sort, sort_by


Time.now, returns the current system time without considering the application's time zone.
Time.current ActiveSupport library loaded to use Time.current.
Time. 
Time.parse(), Date.parse takes a string, which it parses heuristically, Date.parse('1999-365')      # => #<Date: 1999-12-31>
Time.strptime(),  --> Date.strptime('2001-02-03', '%Y-%m-%d')  # => #<Date: 2001-02-03>
Time.now.day, 
Time.now.month, 
Time.now.wday, 
Time.now + 1.day + 1.month, ActiveSupport extension 
1.year